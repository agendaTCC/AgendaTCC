from django.shortcuts import render_to_response, redirect, get_object_or_404
from django.contrib import messages
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
from django.contrib import auth
from django.contrib.auth import forms, authenticate, views, login
from django import http
from django.core.urlresolvers import reverse
from django.contrib.auth.models import User
from models import UserProfile
from forms import UserProfileForm, FormRegistro
from django.forms import ModelForm
from django.http import HttpResponse, HttpResponseRedirect



def cadastro(request):
    #Cadastro, retorna para a url o formulario para cadastro existente no arquivos forms.py, verifica se o request  um 
    #metodo POST, se sim, cria um formulario novo com as informacoes recebidas pelo POST, caso essa informacoes sejam
    #validades o formulario e salvo, e a pagina volta ao inicio
    if request.method == 'POST':
        form = FormRegistro(request.POST)
        if form.is_valid():
            novo_usuario = form.save()
            return HttpResponseRedirect('/')
    else:
        form = FormRegistro()
        
    return render_to_response(
        'usuarios/cadastro.html',
        {'form':form},
        context_instance=RequestContext(request),
        )
    

@login_required
def editprofile(request, id=None):
    #EditProfile, retorna para a url o formulario para edicao de cadastro, procura pelo usuario pelo id, instancia as informacoes
    #do usuario, verifica se e uma requisicao de POST, caso sim salva o usuario, se sao cira um novo formulario com a instancia do usuario

    instance = None
    if id is not None:
        instance = UserProfile.objects.get(user=id)
        usuario = instance.user
        print usuario
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=instance)
        if form.is_valid():
            form.save()
            messages.success(request, ('Perfil salvo com sucesso!'))
            return HttpResponseRedirect('/perfil/%d'%int(id))
    else:
        form = UserProfileForm(instance=instance)
    return render_to_response('usuarios/edit.html', {
        'form': form, 'usuario':usuario,
    }, context_instance=RequestContext(request))


def _clean_next_url(request):
    """Taken from zamboni. Prevent us from redirecting outside of drumbeat."""
    gets = request.GET.copy()
    url = gets['next']
    if url and '://' in url:
        url = None
    gets['next'] = url
    request.GET = gets
    return request

@login_required
def profile(request, usuario_id):
    usuario = get_object_or_404(User, pk=usuario_id)
    return render_to_response('usuarios/perfil.html', {
        'usuario': usuario,
    }, context_instance=RequestContext(request))
    
    
def login(request):
    """Log the user in. Lifted most of this code from zamboni."""

    if 'next' in request.GET:
        request = _clean_next_url(request)
        request.session['next'] = request.GET['next']

    logout(request)

    r = views.login(request, template_name='usuarios/login.html',
                         authentication_form=forms.AuthenticationForm)

    if isinstance(r, http.HttpResponseRedirect):
        # Succsesful log in according to django.  Now we do our checks.  I do
        # the checks here instead of the form's clean() because I want to use
        # the messages framework and it's not available in the request there
        # user = request.user.get_profile()
        
        messages.success(request, ('Entrou do sistema com sucesso.'))
        
        next_param = request.session.get('next', None)
        if next_param:
            del request.session['next']
            if not next_param.startswith('/'):
                next_param = '/%s' % (next_param,)
            return http.HttpResponseRedirect(next_param)

    elif request.method == 'POST':
        messages.error(request, ('Nome de usuario ou senha errados.'))
        # run through views.login again to render template with messages.
        r = views.login(request, template_name='usuarios/login.html',
                         authentication_form=forms.AuthenticationForm)

    return r

@login_required()
def logout(request):
    """Destroy user session."""
    auth.logout(request)
    messages.success(request, ('Saiu do sistema com sucesso.'))
    return http.HttpResponseRedirect(reverse('website_index'))





